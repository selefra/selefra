// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	UploadLogStream(ctx context.Context, opts ...grpc.CallOption) (Log_UploadLogStreamClient, error)
	UploadLogStatus(ctx context.Context, in *StatusInfo, opts ...grpc.CallOption) (*Res, error)
	GetLogStream(ctx context.Context, in *BaseConnectionInfo, opts ...grpc.CallOption) (Log_GetLogStreamClient, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) UploadLogStream(ctx context.Context, opts ...grpc.CallOption) (Log_UploadLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[0], "/log.Log/UploadLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logUploadLogStreamClient{stream}
	return x, nil
}

type Log_UploadLogStreamClient interface {
	Send(*ConnectMsg) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type logUploadLogStreamClient struct {
	grpc.ClientStream
}

func (x *logUploadLogStreamClient) Send(m *ConnectMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logUploadLogStreamClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) UploadLogStatus(ctx context.Context, in *StatusInfo, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/log.Log/UploadLogStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) GetLogStream(ctx context.Context, in *BaseConnectionInfo, opts ...grpc.CallOption) (Log_GetLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[1], "/log.Log/GetLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logGetLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_GetLogStreamClient interface {
	Recv() (*ConnectMsg, error)
	grpc.ClientStream
}

type logGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *logGetLogStreamClient) Recv() (*ConnectMsg, error) {
	m := new(ConnectMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	UploadLogStream(Log_UploadLogStreamServer) error
	UploadLogStatus(context.Context, *StatusInfo) (*Res, error)
	GetLogStream(*BaseConnectionInfo, Log_GetLogStreamServer) error
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) UploadLogStream(Log_UploadLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLogStream not implemented")
}
func (UnimplementedLogServer) UploadLogStatus(context.Context, *StatusInfo) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLogStatus not implemented")
}
func (UnimplementedLogServer) GetLogStream(*BaseConnectionInfo, Log_GetLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_UploadLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).UploadLogStream(&logUploadLogStreamServer{stream})
}

type Log_UploadLogStreamServer interface {
	SendAndClose(*Res) error
	Recv() (*ConnectMsg, error)
	grpc.ServerStream
}

type logUploadLogStreamServer struct {
	grpc.ServerStream
}

func (x *logUploadLogStreamServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logUploadLogStreamServer) Recv() (*ConnectMsg, error) {
	m := new(ConnectMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Log_UploadLogStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).UploadLogStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.Log/UploadLogStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).UploadLogStatus(ctx, req.(*StatusInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseConnectionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).GetLogStream(m, &logGetLogStreamServer{stream})
}

type Log_GetLogStreamServer interface {
	Send(*ConnectMsg) error
	grpc.ServerStream
}

type logGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *logGetLogStreamServer) Send(m *ConnectMsg) error {
	return x.ServerStream.SendMsg(m)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadLogStatus",
			Handler:    _Log_UploadLogStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadLogStream",
			Handler:       _Log_UploadLogStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLogStream",
			Handler:       _Log_GetLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpcClient/proto/log/log.proto",
}
