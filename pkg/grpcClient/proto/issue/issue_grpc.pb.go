// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package issue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IssueClient is the client API for Issue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueClient interface {
	UploadIssueStream(ctx context.Context, opts ...grpc.CallOption) (Issue_UploadIssueStreamClient, error)
}

type issueClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueClient(cc grpc.ClientConnInterface) IssueClient {
	return &issueClient{cc}
}

func (c *issueClient) UploadIssueStream(ctx context.Context, opts ...grpc.CallOption) (Issue_UploadIssueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Issue_ServiceDesc.Streams[0], "/Issue/UploadIssueStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &issueUploadIssueStreamClient{stream}
	return x, nil
}

type Issue_UploadIssueStreamClient interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type issueUploadIssueStreamClient struct {
	grpc.ClientStream
}

func (x *issueUploadIssueStreamClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *issueUploadIssueStreamClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IssueServer is the server API for Issue service.
// All implementations must embed UnimplementedIssueServer
// for forward compatibility
type IssueServer interface {
	UploadIssueStream(Issue_UploadIssueStreamServer) error
	mustEmbedUnimplementedIssueServer()
}

// UnimplementedIssueServer must be embedded to have forward compatible implementations.
type UnimplementedIssueServer struct {
}

func (UnimplementedIssueServer) UploadIssueStream(Issue_UploadIssueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadIssueStream not implemented")
}
func (UnimplementedIssueServer) mustEmbedUnimplementedIssueServer() {}

// UnsafeIssueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueServer will
// result in compilation errors.
type UnsafeIssueServer interface {
	mustEmbedUnimplementedIssueServer()
}

func RegisterIssueServer(s grpc.ServiceRegistrar, srv IssueServer) {
	s.RegisterService(&Issue_ServiceDesc, srv)
}

func _Issue_UploadIssueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IssueServer).UploadIssueStream(&issueUploadIssueStreamServer{stream})
}

type Issue_UploadIssueStreamServer interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type issueUploadIssueStreamServer struct {
	grpc.ServerStream
}

func (x *issueUploadIssueStreamServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *issueUploadIssueStreamServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Issue_ServiceDesc is the grpc.ServiceDesc for Issue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Issue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Issue",
	HandlerType: (*IssueServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadIssueStream",
			Handler:       _Issue_UploadIssueStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpcClient/proto/issue/issue.proto",
}
